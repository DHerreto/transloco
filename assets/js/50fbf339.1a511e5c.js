"use strict";(self.webpackChunktransloco_docs=self.webpackChunktransloco_docs||[]).push([[9717],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),g=r,m=d["".concat(i,".").concat(g)]||d[g]||p[g]||a;return n?o.createElement(m,s(s({ref:t},u),{},{components:n})):o.createElement(m,s({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<a;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8623:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return g},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),s=["components"],l={title:"Persist Translations",description:"Plugins - Persist Translations | Transloco Angular i18n"},i=void 0,c={unversionedId:"plugins/persist-translations",id:"plugins/persist-translations",title:"Persist Translations",description:"Plugins - Persist Translations | Transloco Angular i18n",source:"@site/docs/plugins/persist-translations.mdx",sourceDirName:"plugins",slug:"/plugins/persist-translations",permalink:"/transloco/docs/plugins/persist-translations",draft:!1,editUrl:"https://github.com/ngneat/transloco/edit/master/docs/docs/plugins/persist-translations.mdx",tags:[],version:"current",frontMatter:{title:"Persist Translations",description:"Plugins - Persist Translations | Transloco Angular i18n"},sidebar:"docs",previous:{title:"Message Format",permalink:"/transloco/docs/plugins/message-format"},next:{title:"Persist Lang",permalink:"/transloco/docs/plugins/persist-lang"}},u={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Clear Storage",id:"clear-storage",level:2}],d={toc:p};function g(e){var t=e.components,n=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This plugin provides the functionality of persisting translations to the provided storage."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @ngneat/transloco-persist-translations\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Import the ",(0,a.kt)("inlineCode",{parentName:"p"},"TranslocoPersistTranslationsModule")," module into the ",(0,a.kt)("inlineCode",{parentName:"p"},"TranslocoRootModule"),", and provide the storage you would like to use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="transloco-root.module.ts"',title:'"transloco-root.module.ts"'},"import {\n  TranslocoPersistTranslationsModule,\n  PERSIST_TRANSLATIONS_STORAGE\n} from '@ngneat/transloco-persist-translations';\n\n@NgModule({\n  imports: [\n      TranslocoPersistTranslationsModule.forRoot({\n        loader: TranslocoHttpLoader, ====> Auto generated via ng add\n        storage: {\n          provide: PERSIST_TRANSLATIONS_STORAGE,\n          useValue: localStorage\n        }\n      })\n  ],\n  ...\n})\nexport class TranslocoRootModule {}\n")),(0,a.kt)("p",null,"Note that you should ",(0,a.kt)("strong",{parentName:"p"},"not")," include the default loader to make it work."),(0,a.kt)("p",null,"You can also use an async storage. For example, let's install ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/localForage/localForage"},"localForage")," and use ",(0,a.kt)("inlineCode",{parentName:"p"},"IndexedDB"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="transloco-root.module.ts"',title:'"transloco-root.module.ts"'},"import {\n  TranslocoPersistTranslationsModule,\n  PERSIST_TRANSLATIONS_STORAGE\n} from '@ngneat/transloco-persist-translations';\nimport * as localForage from 'localforage';\n\nlocalForage.config({\n  driver: localForage.INDEXEDDB,\n  name: 'Transloco',\n  storeName: 'translations'\n});\n\n@NgModule({\n  imports: [\n    TranslocoPersistTranslationsModule.forRoot({\n      loader: TranslocoHttpLoader,\n      storage: {\n        provide: PERSIST_TRANSLATIONS_STORAGE,\n        useValue: localForage\n      }\n    })\n  ],\n  ...\n})\nexport class TranslocoRootModule {}\n")),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"TranslocoPersistTranslationsModule")," can also receive the following configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  "ttl": 86400,\n  "storageKey": "yourKey"\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ttl"),": How long the cache should live in seconds."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"storageKey"),": The key to be used to save the translations data.")),(0,a.kt)("h2",{id:"clear-storage"},"Clear Storage"),(0,a.kt)("p",null,"The storage cleanup is done automatically once the ",(0,a.kt)("inlineCode",{parentName:"p"},"ttl")," is passed, but it could also can be done manually by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"clearCache")," method from the cache service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.component.ts"',title:'"app.component.ts"'},"import { TranslocoPersistTranslations } from '@ngneat/transloco-persist-translations';\n\nexport class AppComponent {\n  constructor(private loader: TranslocoPersistTranslations) {}\n\n  clearTranslationsCache() {\n    this.loader.clearCache();\n  }\n}\n")))}g.isMDXComponent=!0}}]);